---
- name: Set container hostname if not defined
  set_fact:
    container_name_default: "{{ environment_name }}-{{ project }}-{{ service_name }}"

- name: Set container hostname if not defined
  set_fact:
    container_name_default: "{{ container_name }}"
  when: container_name is defined

- name: Set container_image_tag if not defined
  set_fact:
    service_vars.container_image_tag: "{{ container_image_tag }}"
  when: service_vars.container_image_tag is not defined

- name: Defining container hostname (stage-project-container_id)
  set_fact:
    service_vars.container_name: "{{ container_name_default }}"
  when: service_vars.container_name is not defined

- name: Defining container hostname from container_name ( {{ service_vars.container_name }} )
  set_fact:
    service_vars.container_hostname: "{{ container_hostname | default (service_vars.container_name) | regex_replace('_', '-') }}"
  when: service_vars.container_hostname is not defined

- name: Include default deployment definition
  include_vars:
    # load vars from (deployment|service|ingress).yml
    file: "vars/{{ type }}.yml"
    name: deploymentDefinition

- name: Create definition
  set_fact:
    rawDefinition: "{{ deploymentDefinition | combine({} if definition == '' else definition, recursive=True) }}"

- debug: var=rawDefinition
- copy:
    content: "{{ rawDefinition | to_nice_yaml }}"
    dest: "/tmp/raw_definition_{{ type }}.yml"

- name: Remove kubernetes primitive from an inline definition "{{ type }}"
  kubernetes:
    api_endpoint: "{{ api_host }}"
    state: "absent"
    service_token: "{{ api_key }}"
    #propagation_policy: "Orphan", "Foreground", "Background"
    propagation_policy: "{{ 'Foreground' if type == 'deployment' else omit }}"
    inline_data: "{{ rawDefinition }}"
  register: k8s_result_remove
  when: type != 'deployment'


- name: Show delete result for "{{ type }}"
  debug: var=k8s_result_remove

- name: Create kubernetes primitive from an inline definition "{{ type }}"
  kubernetes:
    api_endpoint: "{{ api_host }}"
    state: "present"
    service_token: "{{ api_key }}"
    inline_data: "{{ rawDefinition }}"
  register: k8s_result

- name: Show create result for "{{ type }}"
  debug: var=k8s_result

- name: Apply replace for "{{ type }}"
  kubernetes:
    api_endpoint: "{{ api_host }}"
    state: "replace"
    service_token: "{{ api_key }}"
    inline_data: "{{ rawDefinition }}"
  register: k8s_replace_result
  when: type == 'deployment'

- name: Show replace result for "{{ type }}"
  debug: var=k8s_replace_result
