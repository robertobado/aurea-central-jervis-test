{% if k8s_add_capabilities is not defined %}
{% set k8s_add_capabilities = none %}
{% endif %}
{% if k8s_privileged_mode is not defined %}
{% set k8s_privileged_mode = none %}
{% endif %}
{% if k8s_use_persistent_volume_claim is not defined %}
{% set k8s_use_persistent_volume_claim = none %}
{% endif %}
{% if k8s_persistent_volume_claim_name_begins_at is not defined %}
{% set k8s_persistent_volume_claim_name_begins_at = 5 %}
{% endif %}
{% if k8s_deployment_progressDeadlineSeconds is not defined %}
{% set k8s_deployment_progressDeadlineSeconds = none %}
{% endif %}
{% if k8s_seccomp is not defined %}
{% set k8s_seccomp = none %}
{% endif %}
{% if k8s_pod_iam_role is not defined %}
{% set k8s_pod_iam_role = none %}
{% endif %}
{% if k8s_config_maps is not defined %}
{% set k8s_config_maps = none %}
{% endif %}

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  namespace: "{{ k8s_namespace }}"
  name: "{{ container_name | regex_replace('_','-') }}"
  labels:
    service_group: "{{ service_group | regex_replace('_','-') | default('none') }}"
    app: "{{ container_name | regex_replace('_','-') }}"
    app_name: "{{ container_name | regex_replace('_','-') }}"
spec:
  strategy: 
{% if k8s_deployment_strategy | lower == 'recreate' %}
    type: Recreate
{% elif k8s_deployment_strategy | lower == 'rollingupdate' %}
    type: RollingUpdate
    maxUnavailable: {{ k8s_deployment_rollingupdate_maxunavailable | default('25%') }}
    maxSurge: {{ k8s_deployment_rollingupdate_maxsurge | default('25%') }}
{% endif %}
  replicas: {{ k8s_deployment_replicas | default(1) }}
{% if k8s_deployment_progressDeadlineSeconds is not none %}
  progressDeadlineSeconds: {{ k8s_deployment_progressDeadlineSeconds }}
{% endif %}
  minReadySeconds: {{ k8s_deployment_minReadySeconds | default(0) }}
  revisionHistoryLimit: {{ k8s_deployment_revisionHistoryLimit | default(2) }}
  selector:
    matchLabels:
      app: "{{ container_name | regex_replace('_','-') }}"
  template:
    metadata:
      labels:
        app: "{{ container_name | regex_replace('_','-') }}"
        app_name: "{{ container_name | regex_replace('_','-') }}"
{% if k8s_seccomp is not none or k8s_pod_iam_role is not none %}
      annotations:
{% if k8s_seccomp.apparmor_profile is defined and k8s_seccomp.apparmor_profile %}
        container.apparmor.security.beta.kubernetes.io/{{ container_name | regex_replace('_','-') }}: {{ k8s_seccomp.apparmor_profile }}
{% endif %}
{% if k8s_seccomp.seccomp_profile is defined and k8s_seccomp.seccomp_profile %}
        container.seccomp.security.alpha.kubernetes.io/{{ container_name | regex_replace('_','-') }}: {{ k8s_seccomp.seccomp_profile }}
{% endif %}
{% if k8s_pod_iam_role %}
        iam.amazonaws.com/role: {{ k8s_pod_iam_role }}
{% endif %}
{% endif %}
    spec:
      automountServiceAccountToken: {{ k8s_automount_service_account_token }}
      restartPolicy: "{{ k8s_container_restart_policy }}"
      hostname: "{{ container_hostname.split('.')[0] }}"
      nodeSelector:
        kubernetes.io/hostname: {{ k8s_node }}
{% if not stage == 'prod' %}
        central-stage: staging
{% else %}
        central-stage: prod
{% endif %}
      containers:
        - name: "{{ container_name | regex_replace('_','-') }}"
          imagePullPolicy: Always
          image: "{{ container_base_image }}:{{ container_image_tag }}"
{% if k8s_add_capabilities is not none or k8s_privileged_mode is not none %}
          securityContext:
{% if k8s_privileged_mode is not none %}
            allowPrivilegeEscalation: true
            privileged: true
{% endif %}
{% if k8s_add_capabilities is not none %}
            capabilities:
              add: 
{% for capability in k8s_add_capabilities %}
                - "{{ capability }}"
{% endfor %}
{% endif %}
{% endif %}
          resources:
            limits: 
              cpu: "{{ k8s_resources_limit_cpu }}"
              memory: "{{ k8s_resources_limit_memory }}"
            requests:
              cpu: "{{ k8s_resources_request_cpu }}"
              memory: "{{ k8s_resources_request_memory }}"
{% if published_env_variables is defined and published_env_variables %}
          env: 
{% for k,v in published_env_variables.iteritems() %}
          - name: "{{ k }}"
            value: "{{ v }}"
{% endfor %}
{% endif %}
{% if k8s_config_maps is not none %}
{% for configmap in k8s_config_maps %}
{% if configmap.type == 'variable' %}
          - name: {{ configmap.spec[0].var_name }}
            valueFrom:
              configMapKeyRef:
                name: {{ configmap.name }}
                key: {{ configmap.spec[0].var_key }}
{% endif %}
{% endfor %}
{% endif %}
{% if published_volumes is defined and published_volumes %}
          volumeMounts:
{% for volume in published_volumes %}
{% set item = volume.split(':') %}
          - name: {{ item[1] | regex_replace('/','') | regex_replace('_','-') | regex_replace('\.','-') | lower }}
            mountPath: {{ item[1] }}
{% endfor %}
{% endif %}
{% if k8s_config_maps is not none %}
{% for configmap in k8s_config_maps %}
{% if configmap.type == 'volume' %}
          - name: {{ configmap.name }}
            mountPath: {{ configmap.mountpoint }}
{% endif %}
{% endfor %}
{% endif %}
{###########################################################  Need to expose ports only if we have a naked pod (no service or Ingress) otherwise ports are exposed by the svc #}
{% if k8s_ip_private is not defined and k8s_ingress_hosts is not defined %}
{% if published_ports is defined and published_ports %}
          ports:
{% for port in published_ports %}
            - containerPort: {{ port[1:].split('/')[0] }}
{% if port[1:] | search('udp') %}
              protocol: UDP
{% else %}
              protocol: TCP
{% endif %}
{% endfor %}
{% endif %}
{% endif %}
{# ****************************************************** Commented as not supported in K8S 1.8, the following is an alpha feature of 1.9 
{% if service_dns_servers is defined and service_dns_servers %}
        dnsPolicy: "None"
        dnsConfig:
          nameservers:
{% for server in service_dns_servers %}
            - {{ server }}
{% endfor %}
          searches:
{% for domain in service_dns_search_domains %}
            - {{ domain }}
{% endfor %}
{% endif %}
******************************************************* Unsupprted DNS configuration ends here #}
{% if published_volumes is defined and published_volumes %}
      volumes:
{% for volume in published_volumes %}
{% set item = volume.split(':') %}
      - name: {{ item[1] | regex_replace('/','') | regex_replace('_','-') | regex_replace('\.','-') | lower }}
{% set item_name = item[0].split('/') %}
{% if k8s_use_persistent_volume_claim is not none %}
        persistentVolumeClaim:
          claimName: {{ item_name[k8s_persistent_volume_claim_name_begins_at:] | join('-') | lower }}
{% else %}
        hostPath:
          path: {{ item[0] }}
          type: DirectoryOrCreate
{% endif %}
{% endfor %}
{% endif %}
{% if k8s_config_maps is not none %}
{% for configmap in k8s_config_maps %}
{% if configmap.type == 'volume' %}
      - name: {{ configmap.name }}
        configMap:
          name: {{ configmap.name }}
{% if 'spec' in configmap %}
          items:
{% for configmapitem in configmap.spec %}
          - key: {{ configmapitem.key }}
            path: {{ configmapitem.path }}
{% endfor %}
{% endif %}
{% endif %}
{% endfor %}
{% endif %}
{% if published_etc_hosts is defined and published_etc_hosts %}
      hostAliases: 
{% for k,v in published_etc_hosts.iteritems() %}
      - ip: "{{ v }}"
        hostnames:
        - "{{ k }}"
{% endfor %}
{% endif %}

