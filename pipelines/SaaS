#!groovy
/*
TODO: 
1. Refactor code in steps section into a function to improve readability and maintenance
*/

pipeline {
    environment {
        JERVIS_PLAYBOOK = 'aurea-central-jervis-test/ansible/jervis.yml'
        ANSIBLE_VAULT_PASSWORD = credentials('ansible-vault-password')
    }
    agent {
        label 'stable && docker && linux && ansible'
    }
    stages {
        stage('Checkout SCM') {
            steps {
                // Default Git checkout done by Jervis is not compatible with aLine.
                // Please refer: https://jira.devfactory.com/browse/FIRE-14613
                sh 'echo "Inside checkout stage..."
                sh 'ls -lrt $WORKSPACE'
                checkout([$class: 'GitSCM', branches: [[name: env.BRANCH_NAME]], doGenerateSubmoduleConfigurations: false,
                extensions: [[$class: 'LocalBranch', localBranch: env.BRANCH_NAME]], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'github-user-with-token-as-password', url: env.GIT_URL]]])

                withCredentials([usernamePassword(credentialsId: 'github-user-with-token-as-password', usernameVariable: 'USERID', passwordVariable: 'PASSWORD')]) {
                    sh 'git submodule add https://$USERID:$PASSWORD@github.com/trilogy-group/aurea-central-jervis-test.git && git submodule update --init && cd aurea-central-jervis-test && git checkout $CENTRAL_JERVIS_BRANCH'
                }
                sh 'echo "$ANSIBLE_VAULT_PASSWORD" > .ansible-vault-password'
                println("branch first tag = ")
                println("${BRANCH_NAME.tokenize('/')[0]}".toLowerCase())
            }
        }
        stage('Build Docker Image') {
                /* Do not build when branch is master or release */
                when {
                  expression {
                    return !("${BRANCH_NAME.tokenize('/')[0]}".toLowerCase() == 'master' || "${BRANCH_NAME.tokenize('/')[0]}".toLowerCase() == 'release')
                    }
                }
                steps {
                  unstash 'artifacts'
                  sh 'ansible-playbook $JERVIS_PLAYBOOK -i ${INVENTORY_NAME} --tags docker-image-build --vault-password-file=.ansible-vault-password'
                }
        }
        stage('CDH Service Deploy') {
                when {
                    expression {
                        return ("$DEPLOYMENT_TARGET" == 'docker')
                    }
                }
                steps {
                  sh 'ansible-playbook $JERVIS_PLAYBOOK -i ${INVENTORY_NAME} --tags docker-service-deploy --vault-password-file=.ansible-vault-password'
                }
        }
        stage('EC2 Service Deploy') {
                when {
                    expression {
                        return ("$DEPLOYMENT_TARGET" == 'ec2')
                    }
                }
                steps {
                    sh 'ansible-playbook $JERVIS_PLAYBOOK -i ${INVENTORY_NAME} --tags ec2-instance,ec2-service-deploy --vault-password-file=.ansible-vault-password'
                }
        }
        stage('K8s Service Deploy') {
                when {
                    expression {
                        return ("$DEPLOYMENT_TARGET" == 'k8s')
                    }
                }
                steps {
                    sh 'ansible-playbook $JERVIS_PLAYBOOK -i ${INVENTORY_NAME} --tags k8s-deploy --vault-password-file=.ansible-vault-password'
                }
        }
        stage('Health Checks') {
                /* Health Checks are run for all branches */
                steps {
                    sh 'ansible-playbook $JERVIS_PLAYBOOK -i ${INVENTORY_NAME} --tags health-check --vault-password-file=.ansible-vault-password'
                }
        }
        stage('Smoke Tests') {
                /* Smoke test only runs when branch is qa or regression*/
                when {
                    expression {
                        return ("${BRANCH_NAME.tokenize('/')[0]}".toLowerCase() == 'qa' || "${BRANCH_NAME.tokenize('/')[0]}".toLowerCase() == 'regression')
                    }
                }
                steps {
                    sh 'ansible-playbook $JERVIS_PLAYBOOK -i ${INVENTORY_NAME} --tags smoke-test --vault-password-file=.ansible-vault-password'
                }
        }
        stage('Regression Tests') {
                /* Regression test only runs when branch is qa or regression*/
                when {
                    expression {
                        return ("${BRANCH_NAME.tokenize('/')[0]}".toLowerCase() == 'qa' || "${BRANCH_NAME.tokenize('/')[0]}".toLowerCase() == 'regression')
                    }
                }
                steps {
                    sh 'ansible-playbook $JERVIS_PLAYBOOK -i ${INVENTORY_NAME} --tags regression-test --vault-password-file=.ansible-vault-password'
                }
        }
        stage('Performance Tests') {
                /* Performance test only runs when branch is qa or regression*/
                when {
                    expression {
                        return ("${BRANCH_NAME.tokenize('/')[0]}".toLowerCase() == 'qa' || "${BRANCH_NAME.tokenize('/')[0]}".toLowerCase() == 'regression')
                    }
                }
                steps {
                    sh 'ansible-playbook $JERVIS_PLAYBOOK -i ${INVENTORY_NAME} --tags performance-test --vault-password-file=.ansible-vault-password'
                }
        }
        stage('Load Tests') {
                /* Load test only runs when branch is qa or regression*/
                when {
                    expression {
                        return ("${BRANCH_NAME.tokenize('/')[0]}".toLowerCase() == 'qa' || "${BRANCH_NAME.tokenize('/')[0]}".toLowerCase() == 'regression')
                    }
                }
                steps {
                    sh 'ansible-playbook $JERVIS_PLAYBOOK -i ${INVENTORY_NAME} --tags load-test --vault-password-file=.ansible-vault-password'
                }
        }
        stage('Security Tests') {
                /* Security test only runs when branch is qa or regression*/
                when {
                    expression {
                        return ("${BRANCH_NAME.tokenize('/')[0]}".toLowerCase() == 'qa' || "${BRANCH_NAME.tokenize('/')[0]}".toLowerCase() == 'regression')
                    }
                }
                steps {
                    sh 'ansible-playbook $JERVIS_PLAYBOOK -i ${INVENTORY_NAME} --tags security-test --vault-password-file=.ansible-vault-password'
                }
        }
        stage('Promote Packages') {
            /* Promote Packages only runs when branch is release or qa branches */
                when {
                    expression {
                        return ("${BRANCH_NAME.tokenize('/')[0]}".toLowerCase() == 'release' || "${BRANCH_NAME.tokenize('/')[0]}".toLowerCase() == 'qa' )
                    }
                }
                steps {
                    sh 'ansible-playbook $JERVIS_PLAYBOOK -i ${INVENTORY_NAME} --tags promote-packages --vault-password-file=.ansible-vault-password'
                }
        }
    }
}
