#!groovy
pipeline {
    agent {
        label 'stable && docker && linux && ansible'
    }
    stages {
        stage('Build Docker Images') {
            when {expression { return params.BUILD_DOCKER }}
            environment { 
                ANSIBLE_VAULT_PASSWORD = credentials('ansible-vault-password') 
            }
            steps {
                unstash 'artifacts'
                sh 'echo "$ANSIBLE_VAULT_PASSWORD" > .ansible-vault-password'
                sh 'ansible-playbook aurea-central-jervis/ansible/jervis.yml -i .inventory --tags docker-image-build --vault-password-file=.ansible-vault-password'
            }
        }
        stage('Service Deploy') {
            when {expression { return params.MAKE_DEPLOY }}
            environment { 
                ANSIBLE_VAULT_PASSWORD = credentials('ansible-vault-password') 
            }
            steps {
                sh 'echo "$ANSIBLE_VAULT_PASSWORD" > .ansible-vault-password'
                sh 'ansible-playbook aurea-central-jervis/ansible/jervis.yml -i .inventory --tags docker-service-deploy,ec2-instance,ec2-service-deploy --vault-password-file=.ansible-vault-password'
            }
        }
        stage('Run Health Check') {
            when {expression { return params.RUN_HEALTH_CHECK }}
            environment { 
                ANSIBLE_VAULT_PASSWORD = credentials('ansible-vault-password') 
            }
            steps {
                sh 'echo "$ANSIBLE_VAULT_PASSWORD" > .ansible-vault-password'
                sh 'ansible-playbook aurea-central-jervis/ansible/jervis.yml -i .inventory --tags run-health-check --vault-password-file=.ansible-vault-password'
            }
        }
        stage('Run Integration Test') {
            when {expression { return params.RUN_INTEGRATION_TEST }}
            environment { 
                ANSIBLE_VAULT_PASSWORD = credentials('ansible-vault-password') 
            }
            steps {
                sh 'echo "$ANSIBLE_VAULT_PASSWORD" > .ansible-vault-password'
                sh 'ansible-playbook aurea-central-jervis/ansible/jervis.yml -i .inventory --tags run-integration-test --vault-password-file=.ansible-vault-password'
            }
        }
        stage('Run Acceptance Test') {
            when {expression { return params.RUN_ACCEPTANCE_TEST }}
            environment { 
                ANSIBLE_VAULT_PASSWORD = credentials('ansible-vault-password') 
            }
            steps {
                sh 'echo "$ANSIBLE_VAULT_PASSWORD" > .ansible-vault-password'
                sh 'ansible-playbook aurea-central-jervis/ansible/jervis.yml -i .inventory --tags run-acceptance-test --vault-password-file=.ansible-vault-password'
            }
        }
        stage('Run Smoke Test') {
            when {expression { return params.RUN_SMOKE_TEST }}
            environment { 
                ANSIBLE_VAULT_PASSWORD = credentials('ansible-vault-password') 
            }
            steps {
                sh 'echo "$ANSIBLE_VAULT_PASSWORD" > .ansible-vault-password'
                sh 'ansible-playbook aurea-central-jervis/ansible/jervis.yml -i .inventory --tags run-smoke-test --vault-password-file=.ansible-vault-password'
            }
        }
    }
}
