#!groovy
import org.yaml.snakeyaml.Yaml

/* 
TODO: 
1. Refactor code in steps section into a function to improve readability and maintenance 
2. Investigate why ANSIBLE_VAULT_PASSWORD is per stage and not global
*/

pipeline {
    environment {
        DEPLOYMENT_TARGET = getVariable('DEPLOYMENT_TARGET', 'docker')
        JERVIS_PLAYBOOK = 'aurea-central-jervis/ansible/jervis.yml'
        CENTRAL_JERVIS_BRANCH = getVariable('CENTRAL_JERVIS_BRANCH', 'master')
    }
    agent {
        label 'stable && docker && linux && ansible'
    }
    stages {
        stage('Checkout SCM') {
            steps {
                // Default Git checkout done by Jervis is not compatible with aLine.
                // Please refer: https://jira.devfactory.com/browse/FIRE-14613
                checkout([$class: 'GitSCM', branches: [[name: env.BRANCH_NAME]], doGenerateSubmoduleConfigurations: false,
                extensions: [[$class: 'LocalBranch', localBranch: env.BRANCH_NAME]], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'github-user-and-token', url: env.GIT_URL]]])

                withCredentials([usernamePassword(credentialsId: 'github-user-and-token', usernameVariable: 'USERID', passwordVariable: 'PASSWORD')]) {
                    sh 'git submodule add https://$USERID:$PASSWORD@github.com/trilogy-group/aurea-central-jervis.git'
                    sh 'git submodule update --init'
                    sh 'cd aurea-central-jervis && git checkout $CENTRAL_JERVIS_BRANCH'
                }
            }
        }
        stage('Build Docker Image') {
                /* Do not build when branch is master or release */
                when {
                  expression {
                    return !("${GIT_BRANCH}" == 'master' || "${GIT_BRANCH}" == 'release')
                    }
                }
                environment {
                  ANSIBLE_VAULT_PASSWORD = credentials('ansible-vault-password')
                }
                steps {
                  unstash 'artifacts'
                  sh 'echo "$ANSIBLE_VAULT_PASSWORD" > .ansible-vault-password'
                  sh 'ansible-playbook $JERVIS_PLAYBOOK -i ${INVENTORY_NAME} --tags docker-image-build --vault-password-file=.ansible-vault-password'
                }
        }
        stage('Service Deploy') {
                environment {
                  ANSIBLE_VAULT_PASSWORD = credentials('ansible-vault-password')
                  COMPOSE_FORCE_WINDOWS_HOST = 1
                }
                steps {
                  sh 'echo "$ANSIBLE_VAULT_PASSWORD" > .ansible-vault-password'
                  sh 'export COMPOSE_FORCE_WINDOWS_HOST=1 && ansible-playbook $JERVIS_PLAYBOOK -i ${INVENTORY_NAME} --tags docker-service-deploy,ec2-instance,ec2-service-deploy,vmware-group,k8s-deploy --vault-password-file=.ansible-vault-password'
                }
        }
        stage('VMWare Service Deploy') {
                when {
                    expression {
                        return ("$DEPLOYMENT_TARGET" == 'vmware')
                    }
                }
                environment {
                  ANSIBLE_VAULT_PASSWORD = credentials('ansible-vault-password')
                  VMWARE_USER = credentials('vsphere-user-name')
                  VMWARE_PASSWORD = credentials('vsphere-user-password')
                  COMPOSE_FORCE_WINDOWS_HOST = 1
                  OBJC_DISABLE_INITIALIZE_FORK_SAFETY="YES"
                }
                steps {
                  sh 'echo "$ANSIBLE_VAULT_PASSWORD" > .ansible-vault-password'
                  sh 'ansible-playbook $JERVIS_PLAYBOOK -i ${INVENTORY_NAME} --tags vmware-create,vmware-service-deploy --vault-password-file=.ansible-vault-password'
                }
        }
        stage('Health Checks') {
                /* Health Checks are run for all branches */
                environment {
                    ANSIBLE_VAULT_PASSWORD = credentials('ansible-vault-password')
                }
                steps {
                    sh 'echo "$ANSIBLE_VAULT_PASSWORD" > .ansible-vault-password'
                    sh 'ansible-playbook $JERVIS_PLAYBOOK -i ${INVENTORY_NAME} --tags health-check --vault-password-file=.ansible-vault-password'
                }
        }
        stage('Smoke Tests') {
                /* Smoke test only runs when branch is qa or regression*/
                when {
                    expression {
                        return ("${GIT_BRANCH}" == 'qa' || "${GIT_BRANCH}" == 'regression')
                    }
                }
                environment {
                    ANSIBLE_VAULT_PASSWORD = credentials('ansible-vault-password')
                }
                steps {
                    sh 'echo "$ANSIBLE_VAULT_PASSWORD" > .ansible-vault-password'
                    sh 'ansible-playbook $JERVIS_PLAYBOOK -i ${INVENTORY_NAME} --tags smoke-test --vault-password-file=.ansible-vault-password'
                }
        }
        stage('Regression Tests') {
                /* Regression test only runs when branch is qa or regression*/
                when {
                    expression {
                        return ("${GIT_BRANCH}" == 'qa' || "${GIT_BRANCH}" == 'regression')
                    }
                }
                environment {
                    ANSIBLE_VAULT_PASSWORD = credentials('ansible-vault-password')
                }
                steps {
                    sh 'echo "$ANSIBLE_VAULT_PASSWORD" > .ansible-vault-password'
                    sh 'ansible-playbook $JERVIS_PLAYBOOK -i ${INVENTORY_NAME} --tags regression-test --vault-password-file=.ansible-vault-password'
                }
        }
        stage('Performance Tests') {
                /* Performance test only runs when branch is qa or regression*/
                when {
                    expression {
                        return ("${GIT_BRANCH}" == 'qa' || "${GIT_BRANCH}" == 'regression')
                    }
                }
                environment {
                    ANSIBLE_VAULT_PASSWORD = credentials('ansible-vault-password')
                }
                steps {
                    sh 'echo "$ANSIBLE_VAULT_PASSWORD" > .ansible-vault-password'
                    sh 'ansible-playbook $JERVIS_PLAYBOOK -i ${INVENTORY_NAME} --tags performance-test --vault-password-file=.ansible-vault-password'
                }
        }
        stage('Load Tests') {
                /* Load test only runs when branch is qa or regression*/
                when {
                    expression {
                        return ("${GIT_BRANCH}" == 'qa' || "${GIT_BRANCH}" == 'regression')
                    }
                }
                environment {
                    ANSIBLE_VAULT_PASSWORD = credentials('ansible-vault-password')
                }
                steps {
                    sh 'echo "$ANSIBLE_VAULT_PASSWORD" > .ansible-vault-password'
                    sh 'ansible-playbook $JERVIS_PLAYBOOK -i ${INVENTORY_NAME} --tags load-test --vault-password-file=.ansible-vault-password'
                }
        }
        stage('Security Tests') {
                /* Security test only runs when branch is qa or regression*/
                when {
                    expression {
                        return ("${GIT_BRANCH}" == 'qa' || "${GIT_BRANCH}" == 'regression')
                    }
                }
                environment {
                    ANSIBLE_VAULT_PASSWORD = credentials('ansible-vault-password')
                }
                steps {
                    sh 'echo "$ANSIBLE_VAULT_PASSWORD" > .ansible-vault-password'
                    sh 'ansible-playbook $JERVIS_PLAYBOOK -i ${INVENTORY_NAME} --tags security-test --vault-password-file=.ansible-vault-password'
                }
        }
        stage('Promote Packages') {
                /* Promote Packages only runs when branch is qa or release */
                when {
                    expression {
                        return ("${GIT_BRANCH}" == 'qa' || "${GIT_BRANCH}" == 'release')
                    }
                }
                environment {
                    ANSIBLE_VAULT_PASSWORD = credentials('ansible-vault-password')
                }
                steps {
                    sh 'echo "$ANSIBLE_VAULT_PASSWORD" > .ansible-vault-password'
                    sh 'ansible-playbook $JERVIS_PLAYBOOK -i ${INVENTORY_NAME} --tags promote-packages --vault-password-file=.ansible-vault-password'
                }
        }
        stage('Send Notification') {
                /* Notifications are sent for all branches */
                environment {
                    ANSIBLE_VAULT_PASSWORD = credentials('ansible-vault-password')
                }
                steps {
                    sh 'echo "$ANSIBLE_VAULT_PASSWORD" > .ansible-vault-password'
                    sh 'ansible-playbook $JERVIS_PLAYBOOK -i ${INVENTORY_NAME} --tags send-notification --vault-password-file=.ansible-vault-password'
                }
        }
    }
}

class State {
    static Boolean loaded = false
    static Map<String, String> variables = [:]
}

/**
 * If Jenkins shows errors like
 * "Scripts not permitted to use new org.yaml.snakeyaml.Yaml"
 * Then you need to approve signatures on this page for local installation:
 * http://localhost:8080/scriptApproval/
 *
 * or for sandbox
 * http://jervis-sandbox2.devfactory.com/scriptApproval/
 */
def getVariable(String name, String defaultValue = '') {
    if (! State.loaded) {
        def list = getJervisYaml()
        def vars = list['variables'] ?: [:]
        vars.each{ variable ->
            def (key, value) = variable.tokenize('=')
            State.variables[key] = value
        }
        State.loaded = true
    }
    return State.variables[name] ?: defaultValue
}

// Get parsed .jervis.yml
def Map getJervisYaml() {
  def jervisYaml = [:]

  def rawYaml = readFile file: '.jervis.yml', encoding: 'UTF-8'
  def yaml = new Yaml()
  jervisYaml = yaml.load(rawYaml)

  return jervisYaml
}
