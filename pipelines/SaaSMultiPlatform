#!groovy
/*
TODO: 
1. Refactor code in steps section into a function to improve readability and maintenance 
*/

pipeline {
    environment {
        JERVIS_PLAYBOOK = 'aurea-central-jervis/ansible/jervis.yml'
        ANSIBLE_VAULT_PASSWORD = credentials('ansible-vault-password')
        COMPOSE_FORCE_WINDOWS_HOST = 1
    }
    agent {
        label 'stable && docker && linux && ansible'
    }
    stages {
        stage('Checkout SCM') {
            steps {
                // Default Git checkout done by Jervis is not compatible with aLine.
                // Please refer: https://jira.devfactory.com/browse/FIRE-14613
                checkout([$class: 'GitSCM', branches: [[name: env.BRANCH_NAME]], doGenerateSubmoduleConfigurations: false,
                extensions: [[$class: 'LocalBranch', localBranch: env.BRANCH_NAME]], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'github-user-and-token', url: env.GIT_URL]]])

                withCredentials([usernamePassword(credentialsId: 'github-user-and-token', usernameVariable: 'USERID', passwordVariable: 'PASSWORD')]) {
                    sh 'git clone https://$USERID:$PASSWORD@github.com/trilogy-group/aurea-central-jervis.git'
                }
                sh 'echo "$ANSIBLE_VAULT_PASSWORD" > .ansible-vault-password'
            }
        }
        stage('Build Docker Image') {
                /* Do not build when branch is master or release */
                when {
                  expression {
                    return !("${GIT_BRANCH}" == 'master' || "${GIT_BRANCH}" == 'release')
                    }
                }
                steps {
                  unstash 'artifacts'
                    script {
                        Map ansible_tasks = [failFast: true]
                        env.JERVIS_YAMLS.tokenize(',').each{ String jervisFile ->
                            ansible_tasks[jervisFile] = {
                                sh 'JERVIS_FILE=${jervisFile} ansible-playbook $JERVIS_PLAYBOOK -i ${INVENTORY_NAME} --tags docker-image-build --vault-password-file=.ansible-vault-password'
                            }
                        }
                        parallel(ansible_tasks)
                    }
                }
        }
        stage('Service Deploy') {
                steps {
                    script {
                        Map ansible_tasks = [failFast: true]
                        env.JERVIS_YAMLS.tokenize(',').each{ String jervisFile ->
                            ansible_tasks[jervisFile] = {
                                sh 'export COMPOSE_FORCE_WINDOWS_HOST=1 && ansible-playbook $JERVIS_PLAYBOOK -i ${INVENTORY_NAME} --tags docker-service-deploy,ec2-instance,ec2-service-deploy,vmware-group,k8s-deploy --vault-password-file=.ansible-vault-password'
                            }
                        }
                        parallel(ansible_tasks)
                    }
                }
        }
        stage('VMWare Service Deploy') {
                when {
                    expression {
                        return ("$DEPLOYMENT_TARGET" == 'vmware')
                    }
                }
                environment {
                  VMWARE_USER = credentials('vsphere-user-name')
                  VMWARE_PASSWORD = credentials('vsphere-user-password')
                  OBJC_DISABLE_INITIALIZE_FORK_SAFETY="YES"
                }
                steps {
                    script {
                        Map ansible_tasks = [failFast: true]
                        env.JERVIS_YAMLS.tokenize(',').each{ String jervisFile ->
                            ansible_tasks[jervisFile] = {
                                sh 'ansible-playbook $JERVIS_PLAYBOOK -i ${INVENTORY_NAME} --tags vmware-create,vmware-service-deploy --vault-password-file=.ansible-vault-password'
                            }
                        }
                        parallel(ansible_tasks)
                    }
                }
        }
        stage('Health Checks') {
                /* Health Checks are run for all branches */
                steps {
                    script {
                        Map ansible_tasks = [failFast: true]
                        env.JERVIS_YAMLS.tokenize(',').each{ String jervisFile ->
                            ansible_tasks[jervisFile] = {
                                sh 'ansible-playbook $JERVIS_PLAYBOOK -i ${INVENTORY_NAME} --tags health-check --vault-password-file=.ansible-vault-password'
                            }
                        }
                        parallel(ansible_tasks)
                    }
                }
        }
        stage('Smoke Tests') {
                /* Smoke test only runs when branch is qa or regression*/
                when {
                    expression {
                        return ("${GIT_BRANCH}" == 'qa' || "${GIT_BRANCH}" == 'regression')
                    }
                }
                steps {
                    script {
                        Map ansible_tasks = [failFast: true]
                        env.JERVIS_YAMLS.tokenize(',').each{ String jervisFile ->
                            ansible_tasks[jervisFile] = {
                                sh 'ansible-playbook $JERVIS_PLAYBOOK -i ${INVENTORY_NAME} --tags smoke-test --vault-password-file=.ansible-vault-password'
                            }
                        }
                        parallel(ansible_tasks)
                    }
                }
        }
        stage('Regression Tests') {
                /* Regression test only runs when branch is qa or regression*/
                when {
                    expression {
                        return ("${GIT_BRANCH}" == 'qa' || "${GIT_BRANCH}" == 'regression')
                    }
                }
                steps {
                    script {
                        Map ansible_tasks = [failFast: true]
                        env.JERVIS_YAMLS.tokenize(',').each{ String jervisFile ->
                            ansible_tasks[jervisFile] = {
                                sh 'ansible-playbook $JERVIS_PLAYBOOK -i ${INVENTORY_NAME} --tags regression-test --vault-password-file=.ansible-vault-password'
                            }
                        }
                        parallel(ansible_tasks)
                    }
                }
        }
        stage('Performance Tests') {
                /* Performance test only runs when branch is qa or regression*/
                when {
                    expression {
                        return ("${GIT_BRANCH}" == 'qa' || "${GIT_BRANCH}" == 'regression')
                    }
                }
                steps {
                    script {
                        Map ansible_tasks = [failFast: true]
                        env.JERVIS_YAMLS.tokenize(',').each{ String jervisFile ->
                            ansible_tasks[jervisFile] = {
                                sh 'ansible-playbook $JERVIS_PLAYBOOK -i ${INVENTORY_NAME} --tags performance-test --vault-password-file=.ansible-vault-password'
                            }
                        }
                        parallel(ansible_tasks)
                    }
                }
        }
        stage('Load Tests') {
                /* Load test only runs when branch is qa or regression*/
                when {
                    expression {
                        return ("${GIT_BRANCH}" == 'qa' || "${GIT_BRANCH}" == 'regression')
                    }
                }
                steps {
                    script {
                        Map ansible_tasks = [failFast: true]
                        env.JERVIS_YAMLS.tokenize(',').each{ String jervisFile ->
                            ansible_tasks[jervisFile] = {
                                sh 'ansible-playbook $JERVIS_PLAYBOOK -i ${INVENTORY_NAME} --tags load-test --vault-password-file=.ansible-vault-password'
                            }
                        }
                        parallel(ansible_tasks)
                    }
                }
        }
        stage('Security Tests') {
                /* Security test only runs when branch is qa or regression*/
                when {
                    expression {
                        return ("${GIT_BRANCH}" == 'qa' || "${GIT_BRANCH}" == 'regression')
                    }
                }
                steps {
                    script {
                        Map ansible_tasks = [failFast: true]
                        env.JERVIS_YAMLS.tokenize(',').each{ String jervisFile ->
                            ansible_tasks[jervisFile] = {
                                sh 'ansible-playbook $JERVIS_PLAYBOOK -i ${INVENTORY_NAME} --tags security-test --vault-password-file=.ansible-vault-password'
                            }
                        }
                        parallel(ansible_tasks)
                    }
                }
        }
        stage('Promote Packages') {
                /* Promote Packages only runs when branch is qa or release */
                when {
                    expression {
                        return ("${GIT_BRANCH}" == 'qa' || "${GIT_BRANCH}" == 'release')
                    }
                }
                steps {
                    script {
                        Map ansible_tasks = [failFast: true]
                        env.JERVIS_YAMLS.tokenize(',').each{ String jervisFile ->
                            ansible_tasks[jervisFile] = {
                                sh 'ansible-playbook $JERVIS_PLAYBOOK -i ${INVENTORY_NAME} --tags promote-packages --vault-password-file=.ansible-vault-password'
                            }
                        }
                        parallel(ansible_tasks)
                    }
                }
        }
    }
}
