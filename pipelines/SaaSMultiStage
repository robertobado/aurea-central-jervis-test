#!groovy

def defaultLabel = 'stable && docker && linux && ansible'
def ANSIBLE_VAULT_PASSWORD = credentials('ansible-vault-password')

stage('Checkout SCM') {
    node(defaultLabel) {
        checkout scm
        withCredentials([usernamePassword(credentialsId: 'github-user-and-token', usernameVariable: 'USERID', passwordVariable: 'PASSWORD')]) {
            sh 'git submodule add https://$USERID:$PASSWORD@github.com/trilogy-group/aurea-central-jervis.git && git submodule update --init'
        }
    }
}

if(env.JERVIS_RAW_YAML.contains("docker_image") &&
        !("${env.BRANCH_NAME}" == 'master' || "${env.BRANCH_NAME}" == 'release') ) {
    stage('Build Docker Image') {
        node("${BUILD_DOCKER_IMAGE_LABEL}") {
            unstash 'artifacts'
            sh 'echo "$ANSIBLE_VAULT_PASSWORD" > .ansible-vault-password'
            sh 'ansible-playbook $JERVIS_PLAYBOOK -i ${env.INVENTORY_NAME} --tags docker-image-build --vault-password-file=.ansible-vault-password'
        }
    }
}

if(env.JERVIS_RAW_YAML.contains("custom_docker_image") ) {
    stage('Build Custom Docker Image') {
        node("${CUSTOM_DOCKER_IMAGE_LABEL}") {
            sh 'echo "$ANSIBLE_VAULT_PASSWORD" > .ansible-vault-password'
            sh 'ansible-playbook $JERVIS_PLAYBOOK -i ${env.INVENTORY_NAME} --tags custom-docker-image --vault-password-file=.ansible-vault-password'
        }
    }
}

if(env.JERVIS_RAW_YAML.contains("integration-test") ) {
    stage('Integration tests') {
        node("${INTEGRATION_TEST_LABEL}") {
            sh 'echo "$ANSIBLE_VAULT_PASSWORD" > .ansible-vault-password'
            sh 'ansible-playbook $JERVIS_PLAYBOOK -i ${env.INVENTORY_NAME} --tags integration-test --vault-password-file=.ansible-vault-password'
        }
    }
}

if(("${env.DEPLOYMENT_TARGET}" == 'docker') ) {
    stage('CDH Service Deploy') {
        node("${CDH_DEPLOY_LABEL}") {
            sh 'echo "$ANSIBLE_VAULT_PASSWORD" > .ansible-vault-password'
            sh 'ansible-playbook $JERVIS_PLAYBOOK -i ${env.INVENTORY_NAME} --tags docker-service-deploy --vault-password-file=.ansible-vault-password'
        }
    }
}

if(("${env.DEPLOYMENT_TARGET}" == 'ec2') ) {
    stage('EC2 Service Deploy') {
        node("${EC2_DEPLOY_LABEL}") {
            sh 'echo "$ANSIBLE_VAULT_PASSWORD" > .ansible-vault-password'
            sh 'ansible-playbook $JERVIS_PLAYBOOK -i ${env.INVENTORY_NAME} --tags ec2-instance,ec2-service-deploy --vault-password-file=.ansible-vault-password'
        }
    }
}

if(("${env.DEPLOYMENT_TARGET}" == 'k8s') ) {
    stage('K8s Service Deploy') {
        node("${K8S_DEPLOY_LABEL}") {
            sh 'echo "$ANSIBLE_VAULT_PASSWORD" > .ansible-vault-password'
            sh 'ansible-playbook $JERVIS_PLAYBOOK -i ${env.INVENTORY_NAME} --tags k8s-deploy --vault-password-file=.ansible-vault-password'
        }
    }
}

if(env.JERVIS_RAW_YAML.contains("health-check") ) {
    stage('Health Checks') {
        node("${HEALTH_CHECK_LABEL}") {
            sh 'echo "$ANSIBLE_VAULT_PASSWORD" > .ansible-vault-password'
            sh 'ansible-playbook $JERVIS_PLAYBOOK -i ${env.INVENTORY_NAME} --tags health-check --vault-password-file=.ansible-vault-password'
        }
    }
}

if(env.JERVIS_RAW_YAML.contains("smoke-test") &&
        ("${env.BRANCH_NAME}" == 'qa' || "${env.BRANCH_NAME}" == 'regression') ) {
    stage('Smoke Tests') {
        node("${SMOKE_TEST_LABEL}") {
            sh 'echo "$ANSIBLE_VAULT_PASSWORD" > .ansible-vault-password'
            sh 'ansible-playbook $JERVIS_PLAYBOOK -i ${env.INVENTORY_NAME} --tags smoke-test --vault-password-file=.ansible-vault-password'
        }
    }
}

if(env.JERVIS_RAW_YAML.contains("regression-test") &&
        ("${env.BRANCH_NAME}" == 'qa' || "${env.BRANCH_NAME}" == 'regression') ) {
    stage('Regression Tests') {
        node("${REGRESSION_TEST_LABEL}") {
            sh 'echo "$ANSIBLE_VAULT_PASSWORD" > .ansible-vault-password'
            sh 'ansible-playbook $JERVIS_PLAYBOOK -i ${env.INVENTORY_NAME} --tags regression-test --vault-password-file=.ansible-vault-password'
        }
    }
}

if(env.JERVIS_RAW_YAML.contains("performance-test") &&
        ("${env.BRANCH_NAME}" == 'qa' || "${env.BRANCH_NAME}" == 'regression') ) {
    stage('Performance Tests') {
        node("${PERFORMANCE_TEST_LABEL}") {
            sh 'echo "$ANSIBLE_VAULT_PASSWORD" > .ansible-vault-password'
            sh 'ansible-playbook $JERVIS_PLAYBOOK -i ${env.INVENTORY_NAME} --tags performance-test --vault-password-file=.ansible-vault-password'
        }
    }
}

if(env.JERVIS_RAW_YAML.contains("load-test") &&
        ("${env.BRANCH_NAME}" == 'qa' || "${env.BRANCH_NAME}" == 'regression') ) {
    stage('Load Tests') {
        node("${LOAD_TEST_LABEL}") {
            sh 'echo "$ANSIBLE_VAULT_PASSWORD" > .ansible-vault-password'
            sh 'ansible-playbook $JERVIS_PLAYBOOK -i ${env.INVENTORY_NAME} --tags load-test --vault-password-file=.ansible-vault-password'
        }
    }
}

if(env.JERVIS_RAW_YAML.contains("security-test") &&
        ("${env.BRANCH_NAME}" == 'qa' || "${env.BRANCH_NAME}" == 'regression') ) {
    stage('Security Tests') {
        node("${SECURITY_TEST_LABEL}") {
            sh 'echo "$ANSIBLE_VAULT_PASSWORD" > .ansible-vault-password'
            sh 'ansible-playbook $JERVIS_PLAYBOOK -i ${env.INVENTORY_NAME} --tags security-test --vault-password-file=.ansible-vault-password'
        }
    }
}

if(env.JERVIS_RAW_YAML.contains("docker_image") &&
        ("${env.BRANCH_NAME}" == 'release') ) {
    stage('Promote Packages') {
        node("${PROMOTE_PACKAGES_LABEL}") {
            sh 'echo "$ANSIBLE_VAULT_PASSWORD" > .ansible-vault-password'
            sh 'ansible-playbook $JERVIS_PLAYBOOK -i ${env.INVENTORY_NAME} --tags promote-packages --vault-password-file=.ansible-vault-password'
        }
    }
}

